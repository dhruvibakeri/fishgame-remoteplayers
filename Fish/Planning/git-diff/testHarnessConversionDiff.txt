diff --git a/Fish/Common/Controller/src/testHarnessConversion.ts b/Fish/Common/Controller/src/testHarnessConversion.ts
index 922bd65..7343566 100644
--- a/Fish/Common/Controller/src/testHarnessConversion.ts
+++ b/Fish/Common/Controller/src/testHarnessConversion.ts
@@ -1,12 +1,18 @@
+import { InvalidGameStateError } from "../types/errors";
 import { PenguinColor, BoardPosition, Board, Tile } from "../../board";
-import { Player, Game } from "../../state";
+import { Movement } from "../../game-tree";
+import { Player, Game, getCurrentPlayer, MovementGame } from "../../state";
 import { createNumberedBoard } from "./boardCreation";
-import { createGameState } from "./gameStateCreation";
+import { createGameState, PENGUIN_AMOUNT_N } from "./gameStateCreation";
+import { gameIsMovementGame } from "./gameTreeCreation";
+import { movePenguin } from "./penguinPlacement";
 import {
   InputPlayer,
   InputPosition,
   InputState,
   InputBoard,
+  Action,
+  MoveResponseQuery,
 } from "./testHarnessInput";
 import { isError } from "./validation";
 
@@ -54,6 +60,24 @@ const inputPositionToBoardPosition = (
   return { row: inputPosition[0], col: inputPosition[1] };
 };
 
+/**
+ * Given two InputPositions representing the starting and ending positions of
+ * a Movement, create a Movement from them.
+ *
+ * @param fromPosition the starting InputPosition of the movement
+ * @param toPosition the ending InputPosition of the movement
+ * @return the converted Movement
+ */
+const inputPositionsToMovement = (
+  fromPosition: InputPosition,
+  toPosition: InputPosition
+): Movement => {
+  return {
+    startPosition: inputPositionToBoardPosition(fromPosition),
+    endPosition: inputPositionToBoardPosition(toPosition),
+  };
+};
+
 /**
  * Transform the given array of InputPlayers into a penguin positions mapping
  * from each position that holds a penguin to the penguin on that position.
@@ -88,6 +112,34 @@ const inputPlayersToScores = (
     ])
   );
 
+/**
+ * Assuming all the given InputPlayers have valid amounts of placed penguins,
+ * create their respective mapping from each player's PenguinColor to their
+ * number of unplaced penguins.
+ *
+ * @param players the array of InputPlayers to transform
+ * @return the transformed remaining unplaced penguins mapping
+ */
+const inputPlayersToRemainingUnplacedPenguins = (
+  players: Array<InputPlayer>
+): Map<PenguinColor, number> | InvalidGameStateError => {
+  const penguinsToPlace = PENGUIN_AMOUNT_N - players.length;
+  const somePlayerHasTooManyPlacements = players.some(
+    (player: InputPlayer) => player.places.length > penguinsToPlace
+  );
+
+  if (somePlayerHasTooManyPlacements) {
+    return new InvalidGameStateError();
+  }
+
+  return new Map(
+    players.map((player: InputPlayer) => [
+      player.color,
+      penguinsToPlace - player.places.length,
+    ])
+  );
+};
+
 /**
  * Attempt to transform the given InputState into a Game state, returning
  * the Game state if successful and an Error if one occurred while doing
@@ -102,20 +154,51 @@ const inputStateToGameState = (inputState: InputState): Game | Error => {
   const players = inputState.players.map(inputPlayerToPlayer);
   const penguinPositions = inputPlayersToPenguinPositions(inputState.players);
   const scores = inputPlayersToScores(inputState.players);
+  const remainingUnplacedPenguins = inputPlayersToRemainingUnplacedPenguins(
+    inputState.players
+  );
 
   // If an error occurred, short circuit and return the error.
   if (isError(board)) {
     return board;
   }
 
+  // If an error occurred, short circuit and return the error.
+  if (isError(remainingUnplacedPenguins)) {
+    return remainingUnplacedPenguins;
+  }
+
   // Create the Game.
   return {
     ...createGameState(players, board),
     penguinPositions,
     scores,
+    remainingUnplacedPenguins,
   };
 };
 
+/**
+ * Attempt to transform the given InputState into a MovementGame state,
+ * returning the MovementGame state if successful and an Error if one
+ * occurred while doing so.
+ *
+ * @param inputState the InputState to transform
+ * @return the successfully transformed MovementGame state or an error
+ */
+const inputStateToMovementGame = (
+  inputState: InputState
+): MovementGame | Error => {
+  const gameOrError: Game | Error = inputStateToGameState(inputState);
+
+  if (isError(gameOrError)) {
+    // Return as an Error.
+    return gameOrError;
+  } else if (gameIsMovementGame(gameOrError)) {
+    // Return as a MovementGame.
+    return gameOrError;
+  }
+};
+
 /**
  * Transform the given BoardPosition into an InputPosition.
  *
@@ -182,7 +265,7 @@ const gameStateToInputPlayers = (game: Game): Array<InputPlayer> =>
  * @param board the Board to transform
  * @return the transformed InputBoard
  */
-const boardToInputBoard = (board: Board): InputBoard => 
+const boardToInputBoard = (board: Board): InputBoard =>
   board.tiles.map((row: Array<Tile>) =>
     row.map((tile: Tile) => tile.numOfFish)
   );
@@ -200,4 +283,64 @@ const gameToInputState = (game: Game): InputState => {
   };
 };
 
-export { inputStateToGameState, gameToInputState };
+/**
+ * Given a MoveResponseQuery, return the Game state that results from applying
+ * the specified movement to the game state.
+ *
+ * Since the xtree harness assumes that the given MoveResponseQuery is valid
+ * and a portion of this validity means that the move outlined in the query
+ * is valid for the given state, these same assumptions may also be held here when
+ * applying the movement to the Game state. This assumption also ensures that
+ * the given InputState is also a valid state for movement i.e. all penguins
+ * are placed, since no movement would be valid otherwise.
+ *
+ * @param moveResponseQuery the MoveResponseQuery to process
+ * @return the Game state resulting from the query or false if for some reason
+ * this fails.
+ */
+const performMoveResponseQuery = (
+  moveResponseQuery: MoveResponseQuery
+): MovementGame | false => {
+  // Convert the state within the query into a Game state, assuming the
+  // Game is valid as specified in the xtree harness assumptions.
+  const gameState: MovementGame | Error = inputStateToMovementGame(
+    moveResponseQuery.state
+  );
+
+  // Create a Movement from the from and to positions within the query.
+  const movement: Movement = inputPositionsToMovement(
+    moveResponseQuery.from,
+    moveResponseQuery.to
+  );
+
+  // The movement is assumed to be valid.
+  if (isError(gameState)) {
+    return false;
+  } else {
+    return movePenguin(
+      gameState,
+      getCurrentPlayer(gameState),
+      movement.startPosition,
+      movement.endPosition
+    ) as MovementGame;
+  }
+};
+
+/**
+ * Convert the given Movement into an Action.
+ *
+ * @param movement the Movement to convert
+ * @return the converted Action
+ */
+const movementToAction = (movement: Movement): Action => [
+  boardPositionToInputPosition(movement.startPosition),
+  boardPositionToInputPosition(movement.endPosition),
+];
+
+export {
+  inputStateToGameState,
+  gameToInputState,
+  performMoveResponseQuery,
+  inputPositionToBoardPosition,
+  movementToAction,
+};
