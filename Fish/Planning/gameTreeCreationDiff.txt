diff --git a/Fish/Common/Controller/src/gameTreeCreation.ts b/Fish/Common/Controller/src/gameTreeCreation.ts
index a9d86be..3d9e42b 100644
--- a/Fish/Common/Controller/src/gameTreeCreation.ts
+++ b/Fish/Common/Controller/src/gameTreeCreation.ts
@@ -1,24 +1,61 @@
-import { Game, getCurrentPlayerColor } from "../../state";
+import { Game, getCurrentPlayerColor, MovementGame } from "../../state";
 import {
   GameTree,
   Movement,
   LazyGameTree,
   PotentialMovement,
 } from "../../game-tree";
-import { BoardPosition } from "../../board";
+import { BoardPosition, PenguinColor } from "../../board";
 import { getReachablePositions } from "./movementChecking";
 import { movePenguin } from "./penguinPlacement";
+import { InvalidGameForTreeError } from "../types/errors";
+import { isError } from "./validation";
+import { skipToNextActivePlayer } from "./gameStateCreation";
 
 /**
- * Given a Game state, return its corresponding GameTree.
+ * Given a Game state, determine if the Game is a MovementGame i.e. all players
+ * within the Game have placed all of their penguins.
+ *
+ * @param game the Game state to check
+ * @return whether the Game state is a MovementGame
+ */
+const gameIsMovementGame = (game: Game): game is MovementGame =>
+  Array.from(game.remainingUnplacedPenguins).every(
+    ([, unplacedPenguins]: [PenguinColor, number]) => unplacedPenguins === 0
+  );
+
+/**
+ * Given a Game state, return its corresponding GameTree, making sure that the
+ * state is within the movement stage i.e. all penguins have been placed.
  *
  * @param game the Game state
- * @return the state's corresponding GameTree
+ * @return the state's corresponding GameTree or an Error if it cannot be
+ * created.
+ */
+const createGameTree = (game: Game): GameTree | InvalidGameForTreeError => {
+  if (gameIsMovementGame(game)) {
+    return createGameTreeFromMovementGame(game);
+  } else {
+    return new InvalidGameForTreeError(game);
+  }
+};
+
+/**
+ * Given a MovementGame state, return its corresponding GameTree, skipping players
+ * which are unable to make moves. If the result contains an empty list of
+ * potential moves, this then signifies a final game state.
+ *
+ * @param game the MovementGame to be made into a GameTree.
+ * @return the MovementState's corresponding GameTree
  */
-const createGameTree = (game: Game): GameTree => {
+const createGameTreeFromMovementGame = (game: MovementGame): GameTree => {
+  const gameSkippingInactivePlayers: MovementGame = skipToNextActivePlayer(
+    game
+  );
+
   return {
-    gameState: game,
-    potentialMoves: generatePotentialMoveMapping(game),
+    gameState: gameSkippingInactivePlayers,
+    potentialMoves: generatePotentialMoveMapping(gameSkippingInactivePlayers),
   };
 };
 
@@ -29,7 +66,9 @@ const createGameTree = (game: Game): GameTree => {
  * @param game the Game state
  * @return a mapping from potential Movements to their resulting LazyGameTrees
  */
-const generatePotentialMoveMapping = (game: Game): Array<PotentialMovement> => {
+const generatePotentialMoveMapping = (
+  game: MovementGame
+): Array<PotentialMovement> => {
   // From the given starting position, get all the possible Movements from it.
   const startPositionToPotentialMovements = (
     startPosition: BoardPosition
@@ -55,15 +94,18 @@ const generatePotentialMoveMapping = (game: Game): Array<PotentialMovement> => {
 };
 
 /**
- * Given a Game state and a Movement, create the resulting LazyGameTree
+ * Given a MovementGame state and a Movement, create the resulting LazyGameTree
  * corresponding to the current player of the given state making that
- * Movement.
+ * Movement. This function is only used by createGameTree.
  *
  * @param game the Game state
  * @param movement the Movement to apply
  * @return the resultng LazyGameTree
  */
-const createLazyGameTree = (game: Game, movement: Movement): LazyGameTree => {
+const createLazyGameTree = (
+  game: MovementGame,
+  movement: Movement
+): LazyGameTree => {
   // This resulting game state is guaranteed to receive valid inputs as it is
   // only used for GameTree creation, which uses penguins and reachable positions
   // that have already been validated.
@@ -72,8 +114,15 @@ const createLazyGameTree = (game: Game, movement: Movement): LazyGameTree => {
     game.players[game.curPlayerIndex],
     movement.startPosition,
     movement.endPosition
-  ) as Game;
-  return () => createGameTree(newGameState);
+  ) as MovementGame;
+
+  return () => createGameTreeFromMovementGame(newGameState);
 };
 
-export { createGameTree, generatePotentialMoveMapping, createLazyGameTree };
+export {
+  createGameTree,
+  createGameTreeFromMovementGame,
+  generatePotentialMoveMapping,
+  createLazyGameTree,
+  gameIsMovementGame,
+};
